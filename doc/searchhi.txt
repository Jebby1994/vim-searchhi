*searchhi.txt*	Plugin for highlighting the current search result
*searchhi*

==============================================================================
CONTENTS                                                   *searchhi-contents*

    1. Intro .......................................... |searchhi-intro|
        1.1. Credits .................................. |searchhi-credits|
    2. Features ....................................... |searchhi-features|
    3. Quick start .................................... |searchhi-quick-start|
    4. Config ......................................... |searchhi-config|
        4.1. Highlight ................................ |searchhi-highlight|
        4.2. Autocommands ............................. |searchhi-autocmds|
        4.3. Options .................................. |searchhi-options|
    5. Mappings ....................................... |searchhi-mappings|
        5.1. Normal mode .............................. |searchhi-n-mappings|
        5.2. Visual mode .............................. |searchhi-v-mappings|

==============================================================================
1. Intro                                                      *searchhi-intro*

This plugin does primarily one thing: highlight the current search result (the
one under the cursor) in a different style than the others.

------------------------------------------------------------------------------
1.1. Credits                                                *searchhi-credits*

This plugin uses code from the following sources:

Plugin: {vim-searchant}{1}
Author: Tim Schumacher <tim@timakro.de>

    - |searchhi| would not have existed without {vim-searchant}{1}. It uses
      the same basic implementation for highlighting the current search
      result.

                                  {1} https://github.com/timakro/vim-searchant

==============================================================================
2. Features                                                *searchhi-features*

    - Smooth integration with standard search as well as other
      search-enhancing plugins (e.g. {vim-anzu}{2}, {vim-asterisk}{3}).

    - Behaves appropriately in Visual mode.

    - Highlighting is updated predictably when the cursor is moved, as well as
      when switching buffers and windows. It can also automatically be turned
      off with custom autocommands.

    - User autocommands are provided and executed when highlighting is turned
      on and off.

                                {2} https://github.com/osyo-manga/vim-anzu
                                {3} https://github.com/haya14busa/vim-asterisk


==============================================================================
3. Quick start                                          *searchhi-quick-start*

>
    nmap / <Plug>(searchhi-/)
    nmap ? <Plug>(searchhi-?)
    nmap n <Plug>(searchhi-n)
    nmap N <Plug>(searchhi-N)
    nmap * <Plug>(searchhi-*)
    nmap # <Plug>(searchhi-#)
    nmap g* <Plug>(searchhi-g*)
    nmap g# <Plug>(searchhi-g#)
    nmap <silent> <C-L> <Plug>(searchhi-off-all)

    vmap / <Plug>(searchhi-v-/)
    vmap ? <Plug>(searchhi-v-?)
    vmap n <Plug>(searchhi-v-n)
    vmap N <Plug>(searchhi-v-N)
    vmap * <Plug>(searchhi-v-*)
    vmap # <Plug>(searchhi-v-#)
    vmap g* <Plug>(searchhi-v-g*)
    vmap g# <Plug>(searchhi-v-g#)
    vmap <silent> <C-L> <Plug>(searchhi-v-off-all)
<

Integration with {vim-anzu}{2}:
>
    let g:searchhi_autocmds_enabled = 1
    augroup searchhi
        autocmd!
        autocmd User SearchHiOn AnzuUpdateSearchStatusOutput
        autocmd User SearchHiOff echo ''
    augroup END
<

Integration with {vim-asterisk}{3}:
>
    map * <Plug>(asterisk-*)<Plug>(searchhi-update)
    map # <Plug>(asterisk-#)<Plug>(searchhi-update)
    map g* <Plug>(asterisk-g*)<Plug>(searchhi-update)
    map g# <Plug>(asterisk-g#)<Plug>(searchhi-update)

    map z* <Plug>(asterisk-z*)<Plug>(searchhi-update-stay)
    map z# <Plug>(asterisk-z#)<Plug>(searchhi-update-stay)
    map gz* <Plug>(asterisk-gz*)<Plug>(searchhi-update-stay)
    map gz# <Plug>(asterisk-gz#)<Plug>(searchhi-update-stay)
<

If you use the "keep cursor position" feature of {vim-asterisk}{3} (i.e.
|g:asterisk#keeppos| = `1`), use this:
>
    map * <Plug>(asterisk-*)<Plug>(searchhi-update-stay)
    map # <Plug>(asterisk-#)<Plug>(searchhi-update-stay)
    map g* <Plug>(asterisk-g*)<Plug>(searchhi-update-stay)
    map g# <Plug>(asterisk-g#)<Plug>(searchhi-update-stay)

    nmap n <Plug>(searchhi-n-stay)
    nmap N <Plug>(searchhi-N-stay)

    vmap n <Plug>(searchhi-v-n-stay)
    vmap N <Plug>(searchhi-v-N-stay)
<

==============================================================================
4. Config                                                    *searchhi-config*

------------------------------------------------------------------------------
4.1. Highlight                                            *searchhi-highlight*

*hl-CurrentSearch* is used to highlight current search result. Example:
>
    highlight CurrentSearch
        \ cterm=reverse,bold ctermfg=108 ctermbg=235
        \ gui=reverse,bold guifg=#8ec07c guibg=#282828
<

By default,|hl-CurrentSearch| is linked to |hl-Incsearch|, which works nicely
if |hl-Incsearch| and |hl-Search| are distinguishable.

------------------------------------------------------------------------------
4.2. Autocommands                                          *searchhi-autocmds*

Name           Trigger ~
*SearchHiOn*     When highlighting is turned on
*SearchHiOff*    When highlighting is turned off

Below is an example that blinks the cursor when search highlighting is turned
on, making the cursor easier to find. {vim-anzu}{2} is also used to echo the
search count.
>
    let g:searchhi_autocmds_enabled = 1

    augroup searchhi
        autocmd!

        autocmd User SearchHiOn
            \ set guicursor=
                \c-sm:block,i-ci-ve:ver25,r-cr-o:hor20,
                \n-v:block-blinkwait20-blinkon20-blinkoff20 |
            \ AnzuUpdateSearchStatusOutput

        autocmd User SearchHiOff
            \ set guicursor& | echo ''
    augroup END
<

------------------------------------------------------------------------------
4.3. Misc                                               *searchhi-config-misc*

*g:searchhi_open_folds*
    Whether folds should be automatically opened if they contain the current
    search result.
    `---`
    Type: |Number|
    Default: `1`

*g:searchhi_autocmds_enabled*
    Whether |SearchHiOn| and |SearchHiOff| are executed.
    `---`
    Type: |Number|
    Default: `0`

*g:searchhi_handle_windows*
    If enabled:

        - |WinLeave| and |BufLeave| will turn off highlighting for the current
          search result. This will not trigger |searchhi-autocmds|, to prevent
          prompts from appearing if the users' autocmds use |echo|.

        - |WinEnter| and |BufEnter| will turn on highlighting for the current
          search result.

    `---`
    Type: |Number|
    Default: `1`

*g:searchhi_update_triggers_no_autocmd*
    |autocmd-events| separated by commas (no spaces) that update highlighting
    for the current search result. These will not trigger |searchhi-autocmds|.

    By default, |CursorMoved| is in |g:searchhi_update_triggers_no_autocmd|
    instead of |g:searchhi_update_triggers| so performance does not drop
    noticeably when holding movement keys.

    `---`
    Type: |String|
    Default: `'CursorMoved'`

*g:searchhi_update_triggers*
    |autocmd-events| separated by commas (no spaces) that update highlighting
    for the current search result. These trigger |searchhi-autocmds|.
    `---`
    Type: |String|
    Default: `'CursorHold'`

*g:searchhi_off_all_triggers*
    |autocmd-events| separated by commas (no spaces) that turn off all search
    highlighting. These override the |autocmd-events| used in:
        - |g:searchhi_handle_windows|
        - |g:searchhi_update_triggers_no_autocmd|
        - |g:searchhi_update_triggers|

    Note: This uses a hack that runs `set nohlsearch`, because using the
    command |nohlsearch| does not work in scripts.

    `---`
    Type: |String|
    Default: `''`
    Example:
>
    let g:searchhi_off_all_triggers = 'InsertEnter'
<

*g:searchhi_visual_maps_enabled*
    Whether <Plug> mappings should be created for Visual mode functions.
    `---`
    Type: |Number|
    Default: `1`

==============================================================================
5. Mappings                                                *searchhi-mappings*

------------------------------------------------------------------------------
5.1. Normal mode                                         *searchhi-n-mappings*

Standard <Plug> mappings that can replace their respective normal mode
commands:

    *<Plug>(searchhi-/)*
    *<Plug>(searchhi-?)*
    *<Plug>(searchhi-n)*
    *<Plug>(searchhi-N)*
    *<Plug>(searchhi-star)*  -> <Plug>(searchhi-*)
    *<Plug>(searchhi-#)*
    *<Plug>(searchhi-gstar)* -> <Plug>(searchhi-g*)
    *<Plug>(searchhi-g#)*

Alternative <Plug> mappings that can replace their respective normal mode
commands:

    *<Plug>(searchhi-n-stay)*
        Should be used with the "keep cursor position" feature of
        {vim-asterisk}{3} (i.e. if |g:asterisk#keeppos| = `1`).

    *<Plug>(searchhi-N-stay)*
        Like |<Plug>(searchhi-n-stay)|, but moves backwards.

General use <Plug> mappings:

    *<Plug>(searchhi-off-all)*
        Clears all search highlighting.

Low-level <Plug> mappings (can be used to integrate with other plugins):

    *<Plug>(searchhi-update)*
        Clears the old highlight, then highlights the one under the cursor.

        Note: the cursor must be at the start position of the current search
        result.

    *<Plug>(searchhi-update-stay)*
        Like |<Plug>(searchhi-update)|, but can be used if the cursor isn't at
        the start position of the current search result.

        Essentially, if the cursor is inside a search result (not necessarily
        at the start), then the whole search result will be highlighted.

        This was originally made to be compatible with "stay star" motions
        from {vim-asterisk}{3}. This is called a "stay" motion because it
        correctly handles the case where the cursor doesn't jump to the
        position of the first search result.

    *<Plug>(searchhi-off)*
        Clears the highlight on the current search result, but not the
        highlights on the rest of them.

        Note: this doesn't mean that the current search result will not be
        highlighted at all. Instead, it will be highlighted with the same
        highlight group as the other search results (i.e. |hl-Search|).

------------------------------------------------------------------------------
5.2. Visual mode                                         *searchhi-v-mappings*

These are the same as the normal mode mappings, but they preserve the visual
selection:

    *<Plug>(searchhi-v-/)*
    *<Plug>(searchhi-v-?)*
    *<Plug>(searchhi-v-n)*
    *<Plug>(searchhi-v-N)*
    *<Plug>(searchhi-v-star)*  -> <Plug>(searchhi-v-*)
    *<Plug>(searchhi-v-#)*
    *<Plug>(searchhi-v-gstar)* -> <Plug>(searchhi-v-g*)
    *<Plug>(searchhi-v-g#)*

    *<Plug>(searchhi-v-n-stay)*
    *<Plug>(searchhi-v-N-stay)*

    *<Plug>(searchhi-v-off-all)*

    *<Plug>(searchhi-v-update)*
    *<Plug>(searchhi-v-update-stay)*
    *<Plug>(searchhi-v-off)*

 vim:tw=78:sw=4:ft=help:norl:
